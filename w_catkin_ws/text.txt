#include "ros/ros.h"
#include "std_msgs/Int8.h"
#include "std_msgs/Float32.h"
#include "std_msgs/Float64.h"
#include "std_msgs/String.h"
#include "geometry_msgs/Twist.h"
#include "sensor_msgs/Range.h"

#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SLAVE_ADDRESS 0x05

#define RAD2DEG(x) ((x)*180./M_PI)
#define DEG2RAD(x) ((x)/180.*M_PI)

#define Max_R_Angle 45
#define Max_L_Angle -45

#define Max_Car_Speed  255
#define Min_Car_Speed  -255

unsigned char protocol_data[9] = {'#','C',0,0,0,0,0,0,'*'}; // 시작 바이트 '#' - 끝 바이트 '*'
signed char encoderPos_data[6] = {0}; // 시작 바이트 '#' - 끝 바이트 '*'

union 
{
    short steering_angle_data;
    char angle_byte[2];
} Steering;

union 
{
    int speed_data;
    char speed_byte[2];
} Car_Speed;

union
{
	int encoder_data;
	char encoder_byte[2];
} EncoderPos;

int file_I2C;

int open_I2C(void) 
{
    int file;
    const char *deviceName = "/dev/i2c-0"; // 사용할 I2C 장치 파일

    // I2C 장치 열기
    if ((file = open(deviceName, O_RDWR)) < 0) 
    {
        fprintf(stderr, "%s에 접근 실패\n", deviceName);
        exit(1);
    }
    printf("I2C: 연결됨\n");

    // I2C 장치와 통신 설정
    printf("I2C: 0x%x에 대한 버스 획득\n", SLAVE_ADDRESS);
    if (ioctl(file, I2C_SLAVE, SLAVE_ADDRESS) < 0) 
    {
        fprintf(stderr, "I2C: 버스 접근/스레이브 0x%x에 대한 통신 실패\n", SLAVE_ADDRESS);
        exit(1);
    }

    return file;
}

void close_I2C(int fd)
{
   close(fd);
}

double steering_angle = 0.0;

void steering_angle_Callback(const std_msgs::Float32::ConstPtr& msg)
{
    //steering_angle = msg->data;
}

void car_speed_Callback(const std_msgs::Float32::ConstPtr& msg)
{

}

void cmd_vel_Callback(const geometry_msgs::Twist::ConstPtr& msg)
{
    double linear_data;
    double angular_data;
   
    linear_data  = msg->linear.x ;
    angular_data = msg->angular.z ;

    if(linear_data >=  Max_Car_Speed)
    {
        linear_data = Max_Car_Speed;
    }
    if(linear_data <=  Min_Car_Speed)
    {
        linear_data = Min_Car_Speed;
    }

    Car_Speed.speed_data = (int)linear_data;
    
    if(angular_data >= Max_R_Angle)  
    {
        angular_data = Max_R_Angle;
    }
    if(angular_data <= Max_L_Angle)
    {
        angular_data = Max_L_Angle;
    }
      
    Steering.steering_angle_data  = (short)angular_data;
}

/*
int read_encoderPos(int fd)
{
    int encoderPos;
    read(encoderPos)
}
*/

int main(int argc, char **argv)
{
    int count = 0;
  
    ros::init(argc, argv, "car_control");
    ros::NodeHandle nh;
    
    std::string steering_angle_topic     = "/steering_angle";
    std::string car_speed_topic          = "/car_speed";
    std::string cmd_vel_topic            = "/cmd_vel";

    ros::param::get("~steering_angle_topic",       steering_angle_topic);
    ros::param::get("~car_speed_topic",            car_speed_topic);
    ros::param::get("~cmd_vel_topic",              cmd_vel_topic);

    ros::Subscriber steering_angle_sub           = nh.subscribe(steering_angle_topic, 1, steering_angle_Callback);
    ros::Subscriber car_speed_sub                = nh.subscribe(car_speed_topic, 1, car_speed_Callback);
    ros::Subscriber car_control_sub              = nh.subscribe(cmd_vel_topic, 1, cmd_vel_Callback);

    //ros::Publisher cmd_vel_pub = nh.advertise<geometry_msgs::Twist>(cmd_vel_topic, 1);
    
    ros::Rate loop_rate(30.0);  
    
    file_I2C = open_I2C();
    if(file_I2C < 0)
    {
         printf("I2C를 열 수 없습니다.");
        return -1;
    }
    else
    {
        printf("I2C가 연결되었습니다.");
    }
    
    while (ros::ok())
    {
        protocol_data[0] = '#';
        protocol_data[1] = 'C';
        protocol_data[2] = Steering.angle_byte[0];
        protocol_data[3] = Steering.angle_byte[1];
        protocol_data[4] = Car_Speed.speed_byte[0];
        protocol_data[5] = Car_Speed.speed_byte[1];
        protocol_data[6] = 0;  
        protocol_data[7] = 0;    
        protocol_data[8] = '*';
        
        write(file_I2C, protocol_data, 9);
        
        printf("steering_angle : %d \n", Steering.steering_angle_data);
        printf("car_speed : %d\n\n", Car_Speed.speed_data);

		read(file_I2C,encoderPos_data,6);
		if((encoderPos_data[0] == 'D') && (encoderPos_data[5] == '*')) 
		{
			EncoderPos.encoder_byte[0] = encoderPos_data[1];
			EncoderPos.encoder_byte[1] = encoderPos_data[2];
		}
		//encoderPos[0]=encoderPos_data[0];

        printf("encoderPos : %d\n\n", EncoderPos.encoder_data);
		
        ros::spinOnce();
        loop_rate.sleep();
    }
    //close_I2C(file_I2C);

    return 0;
}

//아두이노 코드
#include <Wire.h>
#include <Servo.h>

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

#define SLAVE_ADDRESS 0x05

#define NEUTRAL_ANGLE 90
#define RC_SERVO_PIN   8

#define encodPinA1   2
#define encodPinB1   3

#define MOTOR_DIR    4
#define MOTOR_PWM    5

Servo Steeringservo;

union
{
  short steering_angle_data;
  byte angle_byte[2];
} Steering;

union
{
  int speed_data;
  byte speed_byte[2];
} Car_Speed;

union
{
  int encoder_data;
  byte encoder_byte[2];
} EncoderPos;

unsigned char encoderPos_data[6] = {'D', 0, 0, 0, 0, '*'}; // 시작 바이트 '#' - 끝 바이트 '*'

void setup()
{
#if FASTADC
  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  pinMode(MOTOR_DIR, OUTPUT);
  pinMode(MOTOR_PWM, OUTPUT);

  Wire.begin(SLAVE_ADDRESS);
  Wire.onReceive(receiveData);
  Wire.onRequest(requestData);

  interrupt_setup();

  Serial.begin(115200);
  Steeringservo.attach(RC_SERVO_PIN);
}

void motor_control(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(MOTOR_DIR, HIGH);
    analogWrite(MOTOR_PWM, speed);
  }
  else
  {
    digitalWrite(MOTOR_DIR, LOW);
    analogWrite(MOTOR_PWM, -speed);
  }
  /*
  Serial.print("speed: ");
  Serial.println(speed);
  Serial.println();
  */
}

/////////////////////////////////////// ENCODER ////////////////////////
//volatile long encoderPos = 0;
int encoderPos = 0;

void encoderB()
{
  delayMicroseconds(2);
  if (digitalRead(encodPinB1) == HIGH)
  {
    encoderPos++;
  }
  else
  {
    encoderPos--;
  }
}

void reset_encoder(void)
{
  encoderPos = 0;
}

void interrupt_setup(void)
{
  pinMode(encodPinA1, INPUT_PULLUP);        // quadrature encoder input A
  pinMode(encodPinB1, INPUT_PULLUP);        // quadrature encoder input B
  attachInterrupt(0, encoderB, FALLING);    // update encoder position
  TCCR1B = TCCR1B & 0b11111000 | 1;         // To prevent Motor Noise
}

void encoder_serial_print(void)
{
  Serial.print("encoderPos: ");
  Serial.println(encoderPos);
  //delay(2000);
}

void loop()
{
  encoder_serial_print();
  delay(100);
}

void receiveData(int byteCount)
{
  if (Wire.available() >= 9)
  {
    byte receivedData[9];
    for (int i = 0; i < 9; i++)
    {
      receivedData[i] = Wire.read();
    }

    if (receivedData[0] == '#' && receivedData[1] == 'C' && receivedData[8] == '*')
    {
      Steering.angle_byte[0] = receivedData[2];
      Steering.angle_byte[1] = receivedData[3];
      short angle = Steering.steering_angle_data;

      Car_Speed.speed_byte[0] = receivedData[4];
      Car_Speed.speed_byte[1] = receivedData[5];
      int speed = Car_Speed.speed_data;

      Steeringservo.write(NEUTRAL_ANGLE + angle);
      /*
          Serial.print("angle_offset: ");
          Serial.println(angle);
          Serial.print("angle: ");
          Serial.println(NEUTRAL_ANGLE + angle);
          Serial.println();
          delay(1000);
      */
      motor_control(speed);
    }
    else
    {
      Serial.println("Invalid protocol");
    }
  }
}

void requestData()
{
  EncoderPos.encoder_data = encoderPos;
  encoderPos_data[0] = 'D';
  encoderPos_data[1] = EncoderPos.encoder_byte[0];
  encoderPos_data[2] = EncoderPos.encoder_byte[1];
  encoderPos_data[3] = 0;
  encoderPos_data[4] = 0;
  encoderPos_data[5] = '*';
  Wire.write(encoderPos_data, sizeof(encoderPos_data)); // 배열의 크기를 함께 전달
}
